`timescale 1ns / 1ps


module test_bench;
reg [3:0] AA;
reg [3:0] BB;
reg CCIN;

reg [3:0] SUM;
reg CCOUT;
//module bcd(input [3:0] A, input [3:0] B ,input cin, output [3:0] S,output cout);
bcd inv(AA [3:0],BB [3:0],CCIN,SUM [3:0],CCOUT);

initial AA[3:0] = 4'b0000;
always AA[3:0]= #2 AA[3:0] +4'b0001;

initial begin
//        for( AA[3:0]=4'd0 ; AA[3:0]<4'd9 ; AA[3:0]=AA[3:0]+4'd1 )begin
//            for(BB[3:0]=4'd0;BB[3:0]<4'd9;)begin
//            #10 BB[3:0]=BB[3:0]+4'd1;
//            end
//        end
        
//        AA[3:0]<=4'd0;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd1;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5      
//        AA<=4'd2;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd3;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd4;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd5;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
        
//        AA<=4'd6;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd7;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd8;
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5
//        AA<=4'd9;  
//        BB[3:0]=4'd0; #5
//        BB[3:0]=4'd1; #5
//        BB[3:0]=4'd2; #5
//        BB[3:0]=4'd3; #5
//        BB[3:0]=4'd4; #5
//        BB[3:0]=4'd5; #5
//        BB[3:0]=4'd6; #5
//        BB[3:0]=4'd7; #5
//        BB[3:0]=4'd8; #5
//        BB[3:0]=4'd9; #5       
        $finish;
end
endmodule

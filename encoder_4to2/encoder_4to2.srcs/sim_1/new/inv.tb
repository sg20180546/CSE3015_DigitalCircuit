`timescale 1ns / 1ps


module test_bench;
reg [3:0] aa;
wire [2:0] y;

priority_encoder u_inv(aa[3], aa[2], aa[1], aa[0], y[2], y[1],y[0]);
initial aa[3:0]= 4'b0000;
always aa[3:0]= #100 aa[3:0] + 4'b0001;
initial begin
        #1600
        $finish;
end
endmodule

//`timescale 1ns / 1ps


//module test_bench;
//reg [3:0] aa;
//wire [1:0] y;

//encoder_4to2_or u_inv(aa[3],aa[2],aa[1],aa[0],y[1],y[0]);
//initial begin
//aa[3:0] = 4'b1000; #100
//aa[3:0] = 4'b0100; #100
//aa[3:0] = 4'b0010; #100
//aa[3:0] = 4'b0001; #100
//        #1600
//        $finish;
//end
//endmodule